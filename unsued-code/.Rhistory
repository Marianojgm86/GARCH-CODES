install.packages('devtools')
library(devtools)
find_rtools()
exit
end
RStudio.Version()
RStudio.Version()
RStudio.Version()
RStudio.Version()
rtools
install.packages('devtools')
library(devtools)
source('C:/Users/USUARIO/Desktop/c70fd4d32049c9986a45e2dfc07fb4f0-65020f8aa760348e5adb08945db84d45bf847704/election_night_live_model.R')
library(tidyverse)
library(mvtnorm)
library(politicaldata)
source('~/00-MQE-UCLA/01-FALL-21/ECON430-APP_ST_EC_TS_PHYTON/WEEK-9/Lecture 11/Seasonality_Examples.R')
#***********************************************
# Randall R. Rojas
# Email: rrojas@econ.ucla.edu
# Comment(s): R code example for fitting/forecasting a seasonality to ts data.
# Data File(s): beer.csv, and housing.dat
#***********************************************
# Variable Definitions
# beer = monthly beer production in Australia from Jan 1956 - Aug 1995
# house = monthly housing starts from 1946 to 1993
#************************************************
# Clear all variables and prior sessions
rm(list=ls(all=TRUE))
# install.package('vscDebugger')
library(tis)
require("datasets")
require(graphics)
library("forecast")
library(tseries)
library(stats)
# Basic Seasonality Example using 'tslm'
y =ts(rnorm(120,0,3) + 20*sin(2*pi*(1:120)/12), frequency=12)
fit1=tslm(y ~ trend )
fit2=tslm(y ~ season)
fit3=tslm(y ~ trend+ season)
quartz()
par(mfrow=c(3,1))
plot(y,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(y,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(y,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# Beer Production Example
# Read in the beer data into a data file
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
# Lets look at the beer data once again:
beer=read.csv("beer.csv",header=T,dec=",",sep=";")
beer=ts(beer[,1],start=1956,freq=12)
lbeer<-log(beer)
# Compare 3 different fit models:
fit1=tslm(lbeer ~ trend)
fit2=tslm(lbeer ~ season)
fit3=tslm(lbeer ~ trend + season)
quartz()
par(mfrow=c(3,1))
plot(lbeer,main="Time Series Data: Trend")
lines(fit1$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Seasonality")
lines(fit2$fitted.values, col="red")
plot(lbeer,main="Time Series Data: Trend + Seasonality")
lines(fit3$fitted.values, col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
# Compute forecasts based on the 3 fit models:
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=60),main="Model 1: Forecast Trend")
lines(fit1$fitted.values, col="red")
plot(forecast(fit2,h=60),main="Model 2: Forecast Seasonality")
lines(fit2$fitted.values, col="red")
plot(forecast(fit3,h=60),main="Model 3: Forecast Trend + Seasonality")
lines(fit3$fitted.values, col="red")
# The forecast above can be improved considerably via 'ets'
fit=ets(lbeer)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95)))
#Plot the seasonal factors:
quartz()
fit=tslm(lbeer ~ season+0)
plot(fit$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
#--------Example: Housing Starts----------------
house<-read.table("housing.dat")
housets<-ts(house[,1],start=1946,freq=12)
t<-seq(1946,1993.12,length=length(housets))
quartz()
plot(housets)
quartz()
plot(housets[200:256],type="l") #zoom in
# Seasonal Decomposition of Time Series by Loess
quartz()
plot(stl(housets,s.window="periodic"))
forecast(housets)
summary(forecast(housets))
fit1=tslm(housets ~ trend + season+0)
fit2=tslm(housets ~ trend+0)
fit3=tslm(housets ~ season)
quartz()
par(mfrow=c(3,1))
plot(forecast(fit1,h=24),main="Model 1: Forecast Trend + Seasonality")
lines(fit1$fitted.values,col="red")
plot(forecast(fit2,h=24),main="Model 2: Forecast Trend Only")
lines(fit2$fitted.values,col="red")
plot(forecast(fit3,h=24),main="Model 2: Forecast Seasonality Only")
lines(fit3$fitted.values,col="red")
AIC(fit1,fit2,fit3)
BIC(fit1,fit2,fit3)
#Plot the seasonal factors:
quartz()
par(mfrow=c(2,1))
plot(fit3$coef,type='l',ylab='Seasonal Factors', xlab="Season",lwd=2, main="Plot of Seasonal Factors")
hist(fit3$res,main="Histogram of Residuals",col="skyblue3")
# We can improve the forecast using ets
quartz()
plot(housets,s.window="periodic")
forecast(housets)
plot(forecast(housets))
fit=ets(housets)
quartz()
plot(fit)
accuracy(fit)
plot(forecast(fit,level=c(50,80,95),h=12))
source("~/00-MQE-UCLA/Capstone/GARCH-CODES/rugarch.R", echo=TRUE)
source("~/00-MQE-UCLA/Capstone/GARCH-CODES/rugarch.R", echo=TRUE)
# for predictions
# volatility prediction
volpred <- sigma(garchforercast)
# mean pred
meanpred <- fitted(garchforercast)
volpred
source("~/00-MQE-UCLA/Capstone/GARCH-CODES/rugarch.R", echo=TRUE)
plot(garchvol)
plot(volpred)
View(data)
data <- read.csv("output\\inflationLags.csv",header=TRUE, sep=";", row.names='date')
cont <- read.csv("output\\controls_base.csv",header=TRUE, sep=";", row.names='date')
# ----
data <- read.csv("output\\inflationLags.csv",header=TRUE, sep=";", row.names='date')
cont <- read.csv("output\\controls_base.csv",header=TRUE, sep=";", row.names='date')
cont <- read.csv("output\\controls_base.csv",header=TRUE, sep=";", row.names='date')
cont <- read.csv("output\\controls_base.csv",header=TRUE, sep=";", row.names='date')
# ----
data <- read.csv("output\\inflationLags.csv",header=TRUE, sep=";", row.names='date')
cont <- read.csv("output\\controls_base.csv",header=TRUE, row.names='date')
TScont <- as.xts(cont, order.by=as.Date(rownames(data)))#,"%m/%d/%Y"))
TScont <- as.xts(cont, order.by=as.Date(rownames(cont)))#,"%m/%d/%Y"))
TSCont
TScont
cont <- read.csv("output\\controls_base.csv",header=TRUE, row.names='date')
TScont <- as.xts(cont, order.by=as.Date(rownames(cont)))#,"%m/%d/%Y"))
TSCont
TScont <- as.xts(cont, order.by=as.Date(rownames(cont)))#,"%m/%d/%Y"))
View(garchforercast)
View(TScont)
cont <- read.csv("output\\controls_base.csv",header=TRUE, sep=',' row.names='date')
cont <- read.csv("output\\controls_base.csv",header=TRUE, sep=',', row.names='date')
TScont <- as.xts(cont, order.by=as.Date(rownames(cont)))#,"%m/%d/%Y"))
TScont
TSdata
TScont <- as.xts(cont, order.by=TSDas.Date(rownames(cont),"%m/%d/%Y"))#,"%m/%d/%Y""))
TScont <- as.xts(cont, order.by=as.Date(rownames(cont),"%m/%d/%Y"))#,"%m/%d/%Y""))
View(TScont)
View(TSdata)
garchspec2 <- ugarchspec(mean.model=list(armaOrder = c(1,1)),
variance.model = list(model='sGARCH'),
distribution.model = 'std')
garchfit2 <- ugarchfit(data = inf, spec = garchspec)
plot(sigma(garchfit2))
garchspec2 <- ugarchspec(mean.model=list(armaOrder = c(1,1)),
variance.model = list(model='sGARCH'),
distribution.model = 'std')
garchfit2 <- ugarchfit(data = inf, spec = garchspec)
plot(sigma(garchfit2))
plot(sigma(garchfit))
garchspec2 <- ugarchspec(mean.model=list(armaOrder = c(1,1)),
variance.model = list(model='sGARCH'),
distribution.model = 'std')
garchfit2 <- ugarchfit(data = inf, spec = garchspec2)
plot(sigma(garchfit2))
install.packages("IRkernel")
IRkernel::installspec()
remove.packages("IRkernel")
